import funkin.modding.module.Module;
import funkin.Highscore;
import funkin.Paths;
import funkin.play.PlayState;

import flixel.text.FlxTextBorderStyle;
import flixel.text.FlxText;
import flixel.util.FlxSave;
import flixel.tweens.FlxTween;
import flixel.FlxG;

import Std;
import Math;

// This script may have used some code from other scripts so I'll leave credits below
/*
Psych Engine HUD V-Slice by nubz4lif
OG Psych Engine HUD by Shadow Mario and his team
*/
class GamePlayStats extends Module {
	var save:FlxSave;
	var loaded:Boolean = false;
	var state:PlayState;

	var scoreZoom = true;
	var scoreText:FlxText;
	var scoreTextTween;
		
	var ratingsText:FlxText;

	var ratingPercent:Float;
	var ratingName:String = "?";
	var ratingFC:String;

	var totalNotesHit:Float = 0.0;

	var ratingsTextFont:Str;
	var scoreTextFont:Str;
	var textSize:Int;

	var songScore:Int = 0;

	var sicks:Int = 0;
	var goods:Int = 0;
	var bads:Int = 0;
	var shits:Int = 0;
	var missed:Int = 0;
	var combo:Int = 0;
	var totalNotes:Int = 0;
	var totalNotesPlayed:Int = 0;

	function new() {
		super("GamePlayStats");
		save = new FlxSave();
		save.bind("BadHUDOptions", "FunkinCrew/BadHUD");
	}

	override function onSongLoaded(event:SongLoadScriptEvent) {
		super.onSongLoaded(event);

		if(!loaded) {
			state = PlayState.instance;
			
			state.scoreText = new FlxText();
			state.scoreText.visible = false;

			textSize = 20;
			switch (save.data.fontType) {
				case 0: // Vanilla
					ratingsTextFont = "vcr.ttf";
					scoreTextFont = "vcr.ttf";
				case 1:
					ratingsTextFont = "PressStart2P.ttf";
					scoreTextFont = "PressStart2P.ttf";
					textSize = 13;
			}

			// Create HUD elements
			var scoreTextXPos = save.data.verticalScoreBar ? 10 : 0;
			var scoreTextYPos:Float = save.data.verticalHPBar ? 40 : state.healthBarBG.y + 45;

			if (save.data.showJudgementsScreen) {
				var ratingsTextXPos = 10;
				var ratingsTextYPos = FlxG.height * 0.4;
		
				ratingsText = new FlxText(ratingsTextXPos, ratingsTextYPos, FlxG.width, "", 20);
				ratingsText.setFormat(Paths.font(ratingsTextFont), textSize, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
				ratingsText.scrollFactor.set();
				ratingsText.borderSize = 1.25;
				ratingsText.zIndex = 851;
				state.add(ratingsText);
		
				ratingsText.text = 'Sicks: 0' + '\nGoods: 0' + '\nBads: 0' + '\nShits: 0' + '\nMisses: 0';
				ratingsText.cameras = [state.camHUD];
				scoreTextYPos = save.data.verticalScoreBar ? ratingsText.y - ratingsText.height + 20 : scoreTextYPos;
			}
		
			scoreText = new FlxText(scoreTextXPos, scoreTextYPos, FlxG.width, "", 20);
			scoreText.setFormat(Paths.font(scoreTextFont), textSize, 0xFFFFFFFF, "center", FlxTextBorderStyle.OUTLINE, 0xFF000000);
			scoreText.scrollFactor.set();
			scoreText.borderSize = 1.25;
			scoreText.zIndex = 851;
			state.add(scoreText);
		
			if (save.data.verticalScoreBar && save.data.showJudgementsScreen) {
				scoreText.setFormat(Paths.font(scoreTextFont), textSize, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
				scoreText.text = 'Score: 0' + '\nRating: ?' + '\nCombo: 0';
			} else if (!save.data.verticalScoreBar && save.data.showJudgementsScreen) {
				scoreText.text = 'Score: 0' + ' | Rating: ?\n';
			} else if (save.data.verticalScoreBar) {
				scoreText.setFormat(Paths.font(scoreTextFont), textSize, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
				scoreText.text = 'Score: 0' + '\nRating: ?' + '\nCombo: 0';
			} else {
				scoreText.text = 'Score: 0' + ' | Combo Breaks: 0' + ' | Rating: ?\n';
			}
		
			// Move the stuff to the HUD camera.
			scoreText.cameras = [state.camHUD];

			loaded = true;
		}
	}

	override function onCountdownStart(event:CountdownScriptEvent) {
		super.onCountdownStart(event);
		totalNotes = Highscore.tallies.totalNotes;
		resetJudgements();
		totalNotesPlayed = 0;
		updateScore();
	}

	function onSongEnd(){loaded = false; updateScore();}

	function cleanup() {
		var stuffToRemove = [scoreText, ratingsText, scoreTextTween];

		for (thing in stuffToRemove) {
			if (thing != null) thing.destroy();
		}

		ratingPercent = 0;
		ratingName = "?";
		ratingFC = "";
		totalNotesHit = 0;

		scoreText = null;
		scoreTextTween = null;
		ratingsText = null;
	}

	override function onDestroy(event:ScriptEvent) {
		super.onDestroy(event);
		cleanup();
	}

	public static var ratingStuff:Array<Dynamic> = [
		['You Suck!', 0.2], // From 0% to 19%
		['Shit', 0.4],      // From 20% to 39%
		['Bad', 0.5],       // From 40% to 49%
		['Bruh', 0.6],      // From 50% to 59%
		['Meh', 0.69],      // From 60% to 68%
		['Nice', 0.7],      // 69%
		['Good', 0.8],      // From 70% to 79%
		['Great', 0.9],     // From 80% to 89%
		['Sick!', 1],       // From 90% to 99%
		['Perfect!!', 1]    // The value on this one isn't used actually, since Perfect is always "1"
	];
	
	function calculateRating() {
		if (totalNotesPlayed != 0) {
			switch (save.data.accuracyType) {
					case 0: // Vanilla
					ratingPercent = Math.min(100, Math.max(0, 100 - ((shits + bads + missed) / totalNotes) * 100));
					case 1: // Psych Engine
					ratingPercent = Math.min(100, Math.max(0, 100 - ((sicks * 0 + goods * 0.33 + bads * 0.67 + shits * 1) / totalNotes) * 100));
					case 2: // osu!mania
					ratingPercent = Math.min(100, Math.max(0, ((300 * sicks + 200 * goods + 100 * bads + 50 * shits) / (300 * (sicks + goods + bads + shits + missed))) * 100));
			}
			//ratingPercent = Math.min(1, Math.max(0, totalNotesHit / totalNotesPlayed)); // Old rating percent
			
			ratingName = ratingStuff[ratingStuff.length-1][0];
			if(ratingPercent < 1) {
				for (i in 0...ratingStuff.length-1) {
					if(ratingPercent < ratingStuff[i][1]) {
						ratingName = ratingStuff[i][0];
						break;
					}
				}
			}
		} else {
			ratingName = "?";
			ratingPercent = 0;
		}

		ratingFC = '';

		// Rating grades based on 
		switch (save.data.accuracyType) {
			case 0: // Vanilla
			vanillaRatingNames();
			case 1: // Psych Engine
			psychRatingNames();
			case 2: // osu!mania
			osuGrades();
		}
	}

	function vanillaRatingNames() {
		if (ratingPercent == 100) {
			ratingFC = 'P (Perfect)';
		} else if (ratingPercent >= 90) {
			ratingFC = 'E (Excellent)';
		} else if (ratingPercent >= 80) {
			ratingFC = 'G (Great)';
		} else if (ratingPercent >= 60) {
			ratingFC = 'G (Good)';
		} else ratingFC = 'L (Loss)';
	}

	function psychRatingNames() {
		if (missed == 0) {
			if (shits == 0 && bads == 0 && goods == 0) ratingFC = 'PFC';
			else if (shits > 0 || bads > 0) ratingFC = 'FC';
			else if (goods > 0) ratingFC = 'GFC';
			else if (sicks > 0) ratingFC = 'SFC';
		} else if (missed < 10) {
			ratingFC = 'SDCB';	
		} else ratingFC = 'Clear';
	}

	function osuGrades() {
		if (ratingPercent == 100) {
			ratingFC = 'SS';
		} else if (ratingPercent > 95) {
			ratingFC = 'S';
		} else if (ratingPercent > 90) {
			ratingFC = 'A';
		} else if (ratingPercent > 80) {
			ratingFC = 'B';
		} else if (ratingPercent > 70) {
			ratingFC = 'C';
		} else ratingFC = 'D';
	}

	function doScoreBop() {
		if (!scoreZoom || scoreText == null || !loaded) return;

		if (!save.data.verticalScoreBar) {
			if(scoreTextTween != null) scoreTextTween.cancel();
			scoreText.scale.set(1.075, 1.075);
			scoreTextTween = FlxTween.tween(scoreText.scale, {x: 1, y: 1}, 0.2, {
				onComplete: function(twn:FlxTween) {
					scoreTextTween = null;
				}
			});
		}
	}

	function updateScore(miss:Bool = false) {
		calculateRating();

		var percent:Float = Math.round(ratingPercent * 100) / 100;
		var ratingString:String = totalNotesPlayed != 0 ? (save.data.verticalScoreBar ? percent + '% - ' + ratingFC : ratingName + ' (' + percent + '%) - ' + ratingFC) : ratingName;

		// Change the scoring system based on accuracyType (funy)
		switch (save.data.accuracyType) {
			case 0: // Vanilla
			songScore = state.songScore;
			case 1: // Psych Engine
			songScore = state.songScore;
			case 2: // osu!mania
			var maxScore = 1000000;
			
			var hitValue = sicks * 300 + goods * 200 + bads * 100 + shits * 50;
			var hitBonusValue = sicks * 32 + goods * 16 + bads * 8 + shits * 4;
			var hitBonus = sicks;
			var hitPunishment = goods * 8 + bads * 24 + shits * 44 + missed * 100;
			
			var bonus = Math.max(0, Math.min(100, hitBonus - hitPunishment));
			
			var baseScore = (maxScore * 0.5 / totalNotes) * (hitValue / 300);
			var bonusScore = (maxScore * 0.5 / totalNotes) * (hitBonusValue * Math.sqrt(bonus) / 300);
			
			songScore = Math.round(baseScore + bonusScore);
		}
			
		// Judgements Screen and Score Bar for update
		var tempScore:String;
		var tempRatings:String = save.data.showJudgementsScreen ? 'Sicks: ' + sicks + '\nGoods: ' + goods + '\nBads: ' + bads + '\nShits: ' + shits + '\nMisses: ' + missed : '';
		if (save.data.showJudgementsScreen) {
			if (save.data.verticalScoreBar) {
				tempScore = 
				'Score: ' + (songScore != null ? songScore : 0)
				+ '\nRating: ' + ratingString
				+ '\nCombo: ' + combo;
			} else {
				tempScore = 
				'Score: ' + (songScore != null ? songScore : 0)
				+ ' | Rating: ' + ratingString;
			}
		} else {
			if (save.data.verticalScoreBar) {
				tempScore = 
				'Score: ' + (songScore != null ? songScore : 0)
				+ '\nCombo Breaks: ' + missed
				+ '\nRating: ' + ratingString
				+ '\nCombo: ' + combo;
			} else {
				tempScore = 
				'Score: ' + (songScore != null ? songScore : 0)
				+ ' | Combo Breaks: ' + missed
				+ ' | Rating: ' + ratingString;
			}
		}

		if (ratingsText != null) ratingsText.text = tempRatings + '\n';
		if (scoreText != null) scoreText.text = tempScore + '\n';

		if(!miss) doScoreBop();
	}

	function resetJudgements() {
		var tallies = Highscore.tallies;
		combo = tallies.combo;
		sicks = tallies.sick;
		goods = tallies.good;
		bads = tallies.bad;
		shits = tallies.shit;
		missed = tallies.missed;
	}

	override function onUpdate(event) {
		super.onUpdate(event);
		totalNotesPlayed = Highscore.tallies.totalNotesHit;
		resetJudgements();
	}

	override function onNoteHit(event:ScriptEvent) {
		super.onNoteHit(event);
		if (!loaded || event.healthChange == 0) return;
			
		// Fix for judgements starting from 0
		if (combo >= 0) combo += 1;
		switch (event.judgement) {
			case "sick":
				if (sicks >= 0) sicks += 1;
			case "good":
				if (goods >= 0) goods += 1;
			case "bad":
				if (bads >= 0) bads += 1;
			case "shit":
				if (shits >= 0) shits += 1;
		}
		
		updateScore(true);
	}

	override function onNoteMiss(event:ScriptEvent) {
		super.onNoteMiss(event);
		if (!loaded || event.healthChange == 0) return;

		if (missed >= 0) missed += 1;
		updateScore(false);
	}

	override function onNoteGhostMiss(event:ScriptEvent) {
		super.onNoteGhostMiss(event);
		if (!loaded || event.healthChange == 0) return;

		updateScore(false);
	}

	override function onSongRetry(event:ScriptEvent) {
		super.onSongRetry(event);

		ratingPercent = 0;
		ratingName = "?";
		ratingFC = "";
		totalNotesHit = 0;
			
		resetJudgements();
		updateScore();
	}

	override function onStateChangeEnd(event:StateChangeScriptEvent) {
		super.onStateChangeEnd(event);
		if (!Std.isOfType(event.targetState, PlayState)) {            
			loaded = false;
		}
	}
}